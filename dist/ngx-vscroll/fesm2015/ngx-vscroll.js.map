{"version":3,"file":"ngx-vscroll.js","sources":["ng://ngx-vscroll/lib/ngx-vscroll.enum.ts","ng://ngx-vscroll/lib/ngx-vscroll.service.ts","ng://ngx-vscroll/lib/ngx-vscroll.component.ts","ng://ngx-vscroll/lib/ngx-vscroll.module.ts"],"sourcesContent":["export enum ChangeOperation {\n  NONE,\n  ADD,\n  UPDATE,\n  REMOVE,\n}\n","import { Injectable } from '@angular/core';\nimport { ItemMeta, ViewportMeta, ItemChange, ItemDiff } from './ngx-vscroll.interface';\nimport { ChangeOperation } from './ngx-vscroll.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxVScrollService<T> {\n\n\n  constructor() { }\n\n  trackBy: string;\n\n  getClosestItemIndex(scrollPosition: number, itemMeta: ItemMeta<T>[]) {\n    let current = itemMeta[0].offsetTop;\n    let currentIndex = 0;\n    let difference = Math.abs(scrollPosition - current);\n\n    for (let index = 0; index < itemMeta.length; index++) {\n      const newDifference = Math.abs(scrollPosition - itemMeta[index].offsetTop);\n      if (newDifference < difference) {\n        difference = newDifference;\n        current = itemMeta[index].offsetTop;\n        currentIndex = index;\n      }\n    }\n    return currentIndex;\n  }\n\n  getViewportMeta(closestRowIndex: number, buffer: number, itemMeta: ItemMeta<T>[]): ViewportMeta {\n    let startIndex = closestRowIndex - buffer;\n    let count = closestRowIndex + buffer;\n\n    // Safe check startIndex and count;\n    if (startIndex < 0) {\n      startIndex = 0;\n    }\n    if (count >= itemMeta.length) {\n      count = itemMeta.length;\n    }\n\n    return {\n      count,\n      startIndex,\n    };\n  }\n\n  /**\n   * Find out the difference of item on Add/Update/Remove\n   * @param oldItems Takes previous item list\n   * @param newItems Takes latest item list\n   * @returns Item changes with operation\n   */\n  onItemChange(oldItems: T[], newItems: T[]): ItemChange<T> {\n    if (newItems.length === oldItems.length) {\n      const updationDifference = this.getItemDifferenceForEqualLength(oldItems, newItems);\n      if (updationDifference.length) {\n        return {\n          operation: ChangeOperation.UPDATE,\n          diff: updationDifference\n        };\n      }\n    }\n\n    if (newItems.length > oldItems.length) {\n      const additionDifference = this.getItemDifference(oldItems, newItems);\n      if (additionDifference.length) {\n        return {\n          operation: ChangeOperation.ADD,\n          diff: additionDifference\n        };\n      }\n    }\n\n    if (newItems.length < oldItems.length) {\n      const deletionDifference = this.getItemDifference(newItems, oldItems);\n      if (deletionDifference.length) {\n        return {\n          operation: ChangeOperation.REMOVE,\n          diff: deletionDifference\n        };\n      }\n    }\n\n    return {\n      operation: ChangeOperation.NONE\n    };\n  }\n\n  handleItemChange() {\n\n  }\n\n  processItemMetaForAdd(addedItems: ItemDiff<T>[], renderedElements: HTMLElement[], itemsMeta: ItemMeta<T>[]) {\n    // Filter out only added elements and get height\n    const heights: { [index: number]: number } = {};\n    renderedElements = renderedElements.slice(renderedElements.length - addedItems.length);\n    addedItems.forEach((item, index) => {\n      heights[item.index] = renderedElements[index].getBoundingClientRect().height;\n    });\n\n    // divide items into above and lower bound of itemsMeta\n    const newArrivals = addedItems.reduce((previous, next) => {\n      if (next.index >= itemsMeta.length) {\n        previous.above.push(next);\n      } else {\n        previous.below.push(next);\n      }\n      return previous;\n    }, { above: [], below: [] });\n    newArrivals.above.sort((a, b) => a - b);\n\n    // Process meta for newly added item and\n    // adjust the heights of other items\n    let addedItemIndex = 0;\n    let originalIndex = newArrivals.below.length && newArrivals.below[addedItemIndex].index;\n    let heightAddition = 0;\n\n\n    // loop if items are added in between\n    if (newArrivals.below.length) {\n      for (let index = 0; index < itemsMeta.length; index++) {\n        const itemMeta = itemsMeta[index];\n        if (index === originalIndex) {\n          const newItemMeta: ItemMeta<T> = {\n            height: heights[originalIndex],\n            offsetTop: itemMeta.offsetTop + heightAddition,\n            value: newArrivals.below[addedItemIndex].value\n          };\n          itemsMeta.splice(index, 0, newItemMeta);\n          heightAddition += heights[originalIndex];\n          addedItemIndex = addedItemIndex + 1;\n          originalIndex = newArrivals.below[addedItemIndex] && newArrivals.below[addedItemIndex].index;\n        } else {\n          itemMeta.offsetTop += heightAddition;\n        }\n      }\n    }\n\n    // just push new items at the end of array\n    while (newArrivals.above.length !== 0) {\n      const newArrival = newArrivals.above.pop();\n      const newItemMeta: ItemMeta<T> = {\n        height: heights[newArrival.index],\n        offsetTop: itemsMeta[itemsMeta.length - 1].offsetTop + heights[newArrival.index],\n        value: newArrival.value\n      };\n      itemsMeta.push(newItemMeta);\n    }\n  }\n\n\n  processItemMetaForUpdate(updatedItems: ItemDiff<T>[], renderedElements: HTMLElement[], itemsMeta: ItemMeta<T>[]) {\n    const heights: { [index: number]: number } = {};\n    renderedElements = renderedElements.slice(renderedElements.length - updatedItems.length);\n    updatedItems.forEach((diff, index) => {\n      heights[diff.index] = renderedElements[index].getBoundingClientRect().height;\n    });\n\n    let diffIndex = 0;\n    let originalIndex = updatedItems[diffIndex].index;\n    let adjustmentHeight = 0;\n    for (let index = 0; index < itemsMeta.length; index++) {\n      const itemMeta = itemsMeta[index];\n      if (index === originalIndex) {\n        itemMeta.offsetTop += adjustmentHeight;\n        itemMeta.value = updatedItems[diffIndex].value;\n        const currentHeight = heights[originalIndex];\n        adjustmentHeight += (currentHeight - itemMeta.height);\n        itemMeta.height = currentHeight;\n        diffIndex++;\n        originalIndex = updatedItems[diffIndex] && updatedItems[diffIndex].index;\n      } else {\n        itemMeta.offsetTop += adjustmentHeight;\n      }\n    }\n  }\n\n  processItemMetaForRemove(removedItems: ItemDiff<T>[], itemsMeta: ItemMeta<T>[]) {\n    let diffIndex = 0;\n    let findIndex = removedItems[diffIndex] && removedItems[diffIndex].index;\n    let heightSubtraction = 0;\n    // Following loop is not a simple for loop, as the array being iterated is being mutated in the loop\n    // tslint:disable-next-line: prefer-for-of\n    for (\n      let index = 0, renderedItem = itemsMeta[index];\n      index < itemsMeta.length;\n      index++ , renderedItem = itemsMeta[index]\n    ) {\n      if (index === findIndex) {\n        heightSubtraction += renderedItem.height;\n        itemsMeta.splice(index, 1);\n        removedItems = this.updateIndexes(index, removedItems);\n        index--;\n        diffIndex++;\n        findIndex = removedItems[diffIndex] && removedItems[diffIndex].index;\n      } else {\n        renderedItem.offsetTop -= heightSubtraction;\n      }\n    }\n  }\n\n\n  updateIndexes(removedIndex: number, items: ItemDiff<T>[]) {\n    return items.map(item => {\n      if (item.index > removedIndex) {\n        item.index -= 1;\n      }\n      return item;\n    });\n  }\n\n  /**\n   * Takes 2 param array1 and array2 of type T\n   * @param itemsA Takes old item for add difference and new item for added difference\n   * @param itemsB Takes new item for add difference and old item for deletion difference\n   * @returns ItemDiff of type T\n   */\n  private getItemDifference(itemsA: T[], itemsB: T[]): ItemDiff<T>[] {\n    const itemsAKeys = itemsA.map(item => item[this.trackBy]);\n    const diff: ItemDiff<T>[] = [];\n    itemsB.forEach((item, index) => {\n      if (!itemsAKeys.includes(item[this.trackBy])) {\n        diff.push({ value: item, index });\n      }\n    });\n    return diff;\n  }\n\n  private getItemDifferenceForEqualLength(itemsA: T[], itemsB: T[]): ItemDiff<T>[] {\n    const itemsAKeys = itemsA.map(item => item[this.trackBy]);\n    const diff: ItemDiff<T>[] = [];\n    itemsB.forEach((item, index) => {\n      if (!itemsAKeys.includes(item[this.trackBy])) {\n        diff.push({ value: item, index });\n      } else {\n        const previousObjectindex = itemsA.findIndex((prevItem) => {\n          return prevItem[this.trackBy] === item[this.trackBy];\n        });\n        if (previousObjectindex !== -1 && itemsA[previousObjectindex] !== item) {\n          diff.push({ value: item, index });\n        }\n      }\n    });\n    return diff;\n  }\n}\n","import {\n  Component, OnInit, Output, EventEmitter, Input,\n  ViewChild, ElementRef, SimpleChanges, OnChanges, ViewEncapsulation\n} from '@angular/core';\nimport { ItemMeta, ItemChange, ScrollToOptions } from './ngx-vscroll.interface';\nimport { ChangeOperation } from './ngx-vscroll.enum';\nimport { NgxVScrollService } from './ngx-vscroll.service';\n\n@Component({\n  selector: 'ngx-vscroll',\n  templateUrl: './ngx-vscroll.component.html',\n  styleUrls: ['./ngx-vscroll.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class NgxVScrollComponent<T> implements OnInit, OnChanges {\n\n  constructor(\n    private scrollerService: NgxVScrollService<T>\n  ) {\n    this.setDefaults();\n  }\n\n  @Output() viewportItems = new EventEmitter<T[]>();\n  @Output() scrollEnd = new EventEmitter<T[]>();\n\n  @Input() items: T[];\n  @Input() buffer: number;\n  @Input() trackBy: string;\n\n  private clonedViewportItems: T[];\n  private itemMeta: ItemMeta<T>[];\n  private maxYOffset: number;\n  private lastStartIndex: number;\n  private lastCount: number;\n  private mutationObservers: MutationObserver[];\n  scrollHeight: number;\n  private isScrolling;\n  private isScrollingEvent;\n\n  @ViewChild('scrollParent', { static: false }) scrollParentElementRef: ElementRef<HTMLDivElement>;\n  get scrollParentDiv(): HTMLDivElement {\n    return this.scrollParentElementRef && this.scrollParentElementRef.nativeElement;\n  }\n\n  @ViewChild('scrollItems', { static: false }) scrollItemsElementRef: ElementRef<HTMLDivElement>;\n  get scrollItemsDiv(): HTMLDivElement {\n    return this.scrollItemsElementRef && this.scrollItemsElementRef.nativeElement;\n  }\n\n  ngOnInit() {\n    if (!this.trackBy) {\n      throw new Error('ItemKey must be set to determine the changes and calculations of scroll offsets');\n    } else {\n      this.scrollerService.trackBy = this.trackBy;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const itemsChange = changes.items;\n    if (itemsChange) {\n      if (itemsChange.firstChange || (itemsChange.previousValue as []).length === 0) {\n        this.initialRender();\n      } else {\n        const changeData = this.scrollerService.onItemChange(\n          itemsChange.previousValue,\n          itemsChange.currentValue\n        );\n        this.handleItemChange(changeData);\n      }\n    }\n  }\n\n  scrollTo(options: ScrollToOptions) {\n    const top = options.offsetTop || this.itemMeta[options.index].offsetTop;\n    this.scrollParentDiv.scrollTo({ top });\n  }\n\n  getItemIndex(virtualIndex: number): number {\n    return this.lastStartIndex + virtualIndex;\n  }\n\n  private setDefaults() {\n    this.clonedViewportItems = [];\n    this.itemMeta = [];\n    this.maxYOffset = 0;\n    this.scrollHeight = 0;\n    this.buffer = 10;\n    this.lastStartIndex = 0;\n    this.lastCount = this.buffer;\n    this.mutationObservers = [];\n  }\n\n  private initialRender() {\n    // Render all items to process the meta\n    this.setViewportItems(this.items);\n\n    // Wait a tick for angular to render\n    // TODO: do it outside angular zone\n    setTimeout(() => {\n      this.processItemMeta();\n      this.setScrollHeight();\n      this.setViewportItems(this.items.slice(0, this.buffer));\n\n      // Wait a tick for angular to render\n      setTimeout(() => {\n        this.attachMutationObservers();\n      });\n    });\n  }\n\n  private setViewportItems(items: T[]) {\n    this.clonedViewportItems = Array.from(items);\n    this.viewportItems.emit(items);\n  }\n\n  private processItemMeta() {\n    const htmlElements = this.getHtmlElements();\n    htmlElements.forEach((element, index) => {\n      this.itemMeta.push({\n        offsetTop: element.offsetTop,\n        height: element.getBoundingClientRect().height,\n        value: this.items[index]\n      });\n    });\n  }\n\n  private getHtmlElements() {\n    const elementCollection = this.scrollItemsDiv.childNodes;\n    const elementArray = Array.from(elementCollection) as HTMLElement[];\n    return elementArray.filter(element => element.nodeType === 1);\n  }\n\n  private setScrollHeight() {\n    // Last item offsetTop is the max\n    const lastItem = this.itemMeta[this.itemMeta.length - 1];\n    this.maxYOffset = lastItem.offsetTop;\n\n    // The scroll's height with be the same as the last elements offsetTop plus it's height\n    this.scrollHeight = this.maxYOffset + lastItem.height;\n  }\n\n\n  onScroll() {\n    clearTimeout(this.isScrolling);\n    clearTimeout(this.isScrollingEvent);\n    this.isScrolling = setTimeout(() => {\n      this.handleScroll();\n    }, 15);\n    this.isScrollingEvent = setTimeout(() => {\n      this.scrollEnd.emit();\n    }, 200);\n  }\n\n  handleScroll() {\n    // Get the user's current scroll position\n    const scrollPosition = this.scrollParentDiv.scrollTop;\n\n    // If we are already at the bottom of the list then don't do anything else\n    // and nsure the offset does not exceed the scroll-size height\n    if (scrollPosition >= this.maxYOffset) {\n      this.updateOffsetYPosition(this.maxYOffset);\n      return;\n    }\n\n    // Find the closest row to our current scroll position\n    const closestRowIndex = this.scrollerService.getClosestItemIndex(scrollPosition, this.itemMeta);\n\n    // Find the rows that we need to render using the buffer\n    const viewportMeta = this.scrollerService.getViewportMeta(closestRowIndex, this.buffer, this.itemMeta);\n\n    if (viewportMeta.startIndex !== this.lastStartIndex || viewportMeta.count !== this.lastCount) {\n      this.lastStartIndex = viewportMeta.startIndex;\n      this.lastCount = viewportMeta.count;\n\n      this.deattachMutationObserver();\n\n      // // Get new viewport item acc to start and end indexes\n      const items = this.items.slice(viewportMeta.startIndex, viewportMeta.count);\n      this.setViewportItems(items);\n\n      // Being to update the offset's Y position once we have rendered at least 10 elements\n      const updatePosition = Math.max(0, closestRowIndex - this.buffer) === 0 ? 0 : this.itemMeta[viewportMeta.startIndex].offsetTop;\n\n      this.updateOffsetYPosition(updatePosition);\n\n      // Wait a tick for angular to render\n      setTimeout(() => {\n        this.attachMutationObservers();\n      });\n    }\n  }\n\n  private handleItemChange(change: ItemChange<T>) {\n    switch (change.operation) {\n      case ChangeOperation.ADD:\n        this.handleAddChange(change);\n        break;\n      case ChangeOperation.UPDATE:\n        this.handleUpdateChange(change);\n        break;\n      case ChangeOperation.REMOVE:\n        this.handleRemoveChange(change);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private handleAddChange(change: ItemChange<T>) {\n    // Get the user's current scroll position\n    const scrollPosition = this.scrollParentDiv.scrollTop;\n\n    // Render the new added items to end on the viewport, this will\n    // perform optimization when re-rendering them to it's orginal position\n    const addedItems = change.diff.map(diff => diff.value);\n    this.clonedViewportItems.push(...addedItems);\n    this.setViewportItems(this.clonedViewportItems);\n\n    // Wait a tick for angular to render them\n    setTimeout(() => {\n      // Get rendered item and update item meta\n      const renderedElement = this.getHtmlElements();\n      this.scrollerService.processItemMetaForAdd(change.diff, renderedElement, this.itemMeta);\n\n      // Update viewport back to it's original items;\n      const items = this.items.slice(this.lastStartIndex, this.lastCount);\n      this.setViewportItems(items);\n      this.setScrollHeight();\n\n      // Wait a tick for angular to re-render the added items to it's\n      // original position and scroll back to user original scroll position\n      setTimeout(() => {\n        this.scrollParentDiv.scrollTo({ top: scrollPosition });\n      });\n    });\n  }\n\n  private handleUpdateChange(change: ItemChange<T>) {\n    // Get the user's current scroll position\n    const scrollPosition = this.scrollParentDiv.scrollTop;\n\n    // Find the change that are outside the viewport\n    const updatedItemsOutsideViewport = change.diff\n      .filter(diff => !(diff.index <= this.lastCount && diff.index >= this.lastStartIndex));\n\n    if (updatedItemsOutsideViewport.length) {\n      // Render the items that are outside viewport, this will\n      // perform optimization when re-rendering them to it's orginal position\n      this.clonedViewportItems.push(...updatedItemsOutsideViewport.map(diff => diff.value));\n      this.setViewportItems(this.clonedViewportItems);\n\n      // Wait a tick for angular to render them\n      setTimeout(() => {\n        // Get rendered element and adjust item meta accordingly\n        const renderedElements = this.getHtmlElements();\n        this.scrollerService.processItemMetaForUpdate(updatedItemsOutsideViewport, renderedElements, this.itemMeta);\n\n        // Rerender the original items\n        const items = this.items.slice(this.lastStartIndex, this.lastCount);\n        this.setViewportItems(items);\n        this.setScrollHeight();\n\n        // Wait a tick for angular to re-render the added items to it's\n        // original position and scroll back to user original scroll position\n        setTimeout(() => {\n          this.scrollParentDiv.scrollTo({ top: scrollPosition });\n        });\n      });\n    } else {\n      const updatedItemsOnViewport = change.diff\n        .filter(diff => diff.index <= this.lastCount && diff.index >= this.lastStartIndex);\n\n      // Rerender the original items\n      const items = this.items.slice(this.lastStartIndex, this.lastCount);\n      this.setViewportItems(items);\n\n      // Wait a tick for angular to render them\n      setTimeout(() => {\n        // Get rendered element and adjust item meta accordingly\n        const renderedElements = this.getHtmlElements();\n        this.scrollerService.processItemMetaForUpdate(updatedItemsOnViewport, renderedElements, this.itemMeta);\n\n        this.setScrollHeight();\n\n        // Wait a tick for angular to re-render the added items to it's\n        // original position and scroll back to user original scroll position\n        setTimeout(() => {\n          this.scrollParentDiv.scrollTo({ top: scrollPosition });\n        });\n      });\n    }\n  }\n\n  private handleRemoveChange(change: ItemChange<T>) {\n    // Get the user's current scroll position\n    const scrollPosition = this.scrollParentDiv.scrollTop;\n\n    // Update the item meta of the items that are removed\n    this.scrollerService.processItemMetaForRemove(change.diff, this.itemMeta);\n\n    // Update viewport\n    const items = this.items.slice(this.lastStartIndex, this.lastCount);\n    this.setViewportItems(items);\n    this.setScrollHeight();\n\n    // Wait a Tick for new Items to be rendered\n    setTimeout(() => {\n      // Now set the scroll to it's previous position before the change\n      this.scrollParentDiv.scrollTo({ top: scrollPosition });\n    });\n  }\n\n  private updateOffsetYPosition(position: number) {\n    this.scrollItemsDiv.style.transform = `translateY(${position}px)`;\n  }\n\n  private attachMutationObservers() {\n    const elements = this.getHtmlElements();\n    elements.forEach((element, index) => {\n      const itemIndex = this.getItemIndex(index);\n      const observer = new MutationObserver(() => this.onObserve(element, itemIndex));\n      observer.observe(element,\n        { subtree: true, childList: true });\n      this.mutationObservers.push(observer);\n    });\n  }\n\n  private onObserve(element: Element, itemIndex: number) {\n    const currentHeight = element.getBoundingClientRect().height;\n    if (currentHeight === this.itemMeta[itemIndex].height) {\n      return;\n    }\n\n    const adjustmentOffset = currentHeight - this.itemMeta[itemIndex].height;\n    this.itemMeta[itemIndex].height = currentHeight;\n    for (let index = itemIndex + 1; index < this.itemMeta.length; index++) {\n      const itemMeta = this.itemMeta[index];\n      itemMeta.offsetTop += adjustmentOffset;\n    }\n    this.setScrollHeight();\n  }\n\n  private deattachMutationObserver() {\n    this.mutationObservers.forEach(observer => {\n      observer.disconnect();\n    });\n    this.mutationObservers = [];\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxVScrollComponent } from './ngx-vscroll.component';\n\n\n\n@NgModule({\n  declarations: [NgxVScrollComponent],\n  imports: [\n  ],\n  exports: [NgxVScrollComponent]\n})\nexport class NgxVScrollModule { }\n"],"names":[],"mappings":"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"}